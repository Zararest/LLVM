; ModuleID = 'Handmade-IR'
source_filename = "Handmade-IR"

%Dot = type { i64, i64, i64, i32, i64, %RGB }
%RGB = type { i8, i8, i8 }

@Seed = global i64 1, align 8

define i64 @xorshift() {
Entry:
  %0 = load i64, i64* @Seed, align 8
  %1 = shl i64 %0, 13
  %2 = xor i64 %1, %0
  %3 = lshr i64 %2, 7
  %4 = xor i64 %3, %2
  %5 = shl i64 %4, 17
  %6 = xor i64 %5, %4
  store i64 %6, i64* @Seed, align 8
  ret i64 %6
}

define void @changePosition(%Dot* %0) {
Entry:
  %1 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 4
  store i64 0, i64* %1, align 8
  %2 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 2
  store i64 5, i64* %2, align 8
  %3 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 3
  store i32 1, i32* %3, align 8
  %4 = call i64 @xorshift()
  %5 = and i64 %4, 63
  %6 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 0
  store i64 %5, i64* %6, align 8
  %7 = call i64 @xorshift()
  %8 = and i64 %7, 63
  %9 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 1
  store i64 %8, i64* %9, align 8
  %10 = call i64 @xorshift()
  %11 = trunc i64 %10 to i8
  %12 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 5, i32 0
  store i8 %11, i8* %12, align 8
  %13 = call i64 @xorshift()
  %14 = trunc i64 %13 to i8
  %15 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 5, i32 1
  store i8 %14, i8* %15, align 8
  %16 = call i64 @xorshift()
  %17 = trunc i64 %16 to i8
  %18 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 5, i32 2
  store i8 %17, i8* %18, align 8
  ret void
}

define void @updateDot(%Dot* %0) {
Entry:
  %1 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 3
  %2 = load i32, i32* %1, align 8
  %3 = icmp eq i32 %2, -1
  %4 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  br i1 %3, label %BB1, label %BB3

BB1:                                              ; preds = %Entry
  %6 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %BB3, label %BB2

BB2:                                              ; preds = %BB1
  call void @changePosition(%Dot* %0)
  br label %BBRet

BB3:                                              ; preds = %BB1, %Entry
  %9 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 4
  %10 = icmp ugt i64 %5, 64
  br i1 %10, label %BB4, label %BB5

BB4:                                              ; preds = %BB3
  store i32 -1, i32* %1, align 8
  br label %BB5

BB5:                                              ; preds = %BB4, %BB3
  %11 = phi i32 [ -1, %BB4 ], [ %2, %BB3 ]
  %12 = getelementptr inbounds %Dot, %Dot* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = sext i32 %11 to i64
  %15 = mul i64 %13, %14
  %16 = add i64 %15, %5
  store i64 %16, i64* %9, align 8
  br label %BBRet

BBRet:                                            ; preds = %BB5, %BB2
  ret void
}

define void @changeState(%Dot* %0) {
Entry:
  br label %BB2

BB1:                                              ; preds = %BB2
  ret void

BB2:                                              ; preds = %BB2, %Entry
  %1 = phi i64 [ 0, %Entry ], [ %3, %BB2 ]
  %2 = getelementptr inbounds %Dot, %Dot* %0, i64 0
  call void @updateDot(%Dot* %2)
  %3 = add i64 %1, 1
  %4 = icmp eq i64 %3, 10
  br i1 %4, label %BB1, label %BB2
}

define i64 @distance(i64 %0, i64 %1, i64 %2, i64 %3) {
Entry:
  %4 = icmp ugt i64 %2, %0
  %5 = sub i64 %2, %0
  %6 = sub i64 %0, %2
  %7 = select i1 %4, i64 %5, i64 %6
  %8 = icmp ugt i64 %3, %1
  %9 = sub i64 %3, %1
  %10 = sub i64 %1, %3
  %11 = select i1 %8, i64 %9, i64 %9
  %12 = mul i64 %7, %7
  %13 = mul i64 %11, %11
  %14 = add i64 %13, %12
  ret i64 %14
}

define %Dot* @getNearestDot(i64 %0, i64 %1, %Dot* %2) {
Entry:
  br label %BB2

BB1:                                              ; preds = %BB2
  ret %Dot* %19

BB2:                                              ; preds = %BB2, %Entry
  %3 = phi %Dot* [ null, %Entry ], [ %19, %BB2 ]
  %4 = phi i64 [ 48830, %Entry ], [ %18, %BB2 ]
  %5 = phi i64 [ 0, %Entry ], [ %20, %BB2 ]
  %6 = getelementptr inbounds %Dot, %Dot* %2, i64 %5
  %7 = getelementptr inbounds %Dot, %Dot* %6, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %Dot, %Dot* %2, i64 %5, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = call i64 @distance(i64 %0, i64 %1, i64 %8, i64 %10)
  %12 = getelementptr inbounds %Dot, %Dot* %2, i64 %5, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %13
  %15 = icmp ult i64 %11, %14
  %16 = icmp ult i64 %11, %4
  %17 = and i1 %15, %15
  %18 = select i1 %17, i64 %11, i64 %4
  %19 = select i1 %17, %Dot* %6, %Dot* %3
  %20 = add i64 %5, 1
  %21 = icmp eq i64 %20, 10
  br i1 %21, label %BB1, label %BB2
}

define void @drawFrame(%Dot* %0) {
Entry:
  br label %BB1

BB1:                                              ; preds = %BB3, %Entry
  %1 = phi i64 [ 0, %Entry ], [ %3, %BB3 ]
  %2 = trunc i64 %1 to i32
  br label %BB4

BB2:                                              ; preds = %BB3
  ret void

BB3:                                              ; preds = %BB6
  %3 = add i64 %1, 1
  %4 = icmp eq i64 %3, 64
  br i1 %4, label %BB2, label %BB1

BB4:                                              ; preds = %BB6, %BB1
  %5 = phi i64 [ 0, %BB1 ], [ %13, %BB6 ]
  %6 = call %Dot* @getNearestDot(i64 %1, i64 %5, %Dot* %0)
  %7 = icmp eq %Dot* %6, null
  %8 = trunc i64 %5 to i32
  br i1 %7, label %BB6, label %BB5

BB5:                                              ; preds = %BB4
  %9 = getelementptr inbounds %Dot, %Dot* %6, i64 0, i32 5
  %10 = bitcast %RGB* %9 to i24*
  %11 = load i24, i24* %10, align 8
  br label %BB6

BB6:                                              ; preds = %BB5, %BB4
  %12 = phi i24 [ %11, %BB5 ], [ 657930, %BB4 ]
  call void @simPutPixel(i32 %2, i32 %8, i24 %12)
  %13 = add i64 %5, 1
  %14 = icmp eq i64 %13, 64
  br i1 %14, label %BB3, label %BB4
}

declare void @simPutPixel(i32, i32, i24)

declare void @simFlush()

define void @initDots(%Dot* %0) {
Entry:
  br label %BB2

BB1:                                              ; preds = %BB2
  ret void

BB2:                                              ; preds = %BB2, %Entry
  %1 = phi i64 [ 0, %Entry ], [ %3, %BB2 ]
  %2 = getelementptr inbounds %Dot, %Dot* %0, i64 %1
  call void @changePosition(%Dot* %2)
  %3 = add i64 %1, 1
  %4 = icmp eq i64 %3, 10
  br i1 %4, label %BB1, label %BB2
}

define void @app() {
Entry:
  %0 = alloca [10 x %Dot], align 8
  %1 = bitcast [10 x %Dot]* %0 to i8*
  %2 = getelementptr inbounds [10 x %Dot], [10 x %Dot]* %0, i64 0, i64 0
  call void @initDots(%Dot* %2)
  br label %BB2

BB1:                                              ; preds = %BB2
  ret void

BB2:                                              ; preds = %BB2, %Entry
  %3 = phi i64 [ 0, %Entry ], [ %4, %BB2 ]
  call void @changeState(%Dot* %2)
  call void @drawFrame(%Dot* %2)
  call void @simFlush()
  %4 = add i64 %3, 1
  %5 = icmp eq i64 %4, 100
  br i1 %5, label %BB1, label %BB2
}


==ModuleVerifier==
==OK==


==Execution==
==End==
